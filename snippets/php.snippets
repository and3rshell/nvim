extends html

snippet ?php
	<?php

	declare(strict_types = 1);
snippet dst
	declare(strict_types = 1);
snippet e
	echo ${0};
snippet ?e
	<?php echo ${0} ?>
snippet ?=
	<?= ${0} ?>
snippet ?
	<?php ${0} ?>
snippet ??
	<?php
	${0}
	?>
snippet ?f
	<?php foreach ($${1:array} as $${2:$value}) : ?>
		${0:${VISUAL}}
	<?php endforeach ?>
snippet ?fk
	<?php foreach ($${1:array} as $${2:key} => $${3:value}) : ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
snippet ?if
	<?php if ($${1:var}) : ?>
		${0:${VISUAL}}
	<?php endif ?>
snippet ?ife
	<?php if (${1}) : ?>
		${2}
	<?php else : ?>
		${0:${VISUAL}}
	<?php endif; ?>
snippet ?ifee
	<?php if (${1}) : ?>
		${2}
	<?php else if (${3}) : ?>
		${4}
	<?php else : ?>
		${0:${VISUAL}}
	<?php endif; ?>
snippet ns
	namespace ${1};
snippet cl
	class ${1}
	{
		${0:${VISUAL}}
	}
snippet acl
	abstract class ${1}
	{
		${0:${VISUAL}}
	}
snippet cla
	new class(${1}) {
		${0}
	}
snippet int
	interface ${1:`vim_snippets#Filename()`}
	{
		${0:${VISUAL}}
	}
snippet t
	\$this->
snippet fun
	${1}function ${2}(${3})${4}
	{
		${0}
	}
snippet funa
	function (${1}) {
		${0}
	}
snippet con
	${1}function __construct(${2})
	{
		${0}
	}
snippet if
	if (${1}) {
		${0}
	}
snippet ifn
	if (!${1}) {
		${0}
	}
snippet ife
	if (${1}) {
		${2}
	} else {
		${0:${VISUAL}}
	}
snippet ifen
	if (!${1}) {
		${2}
	} else {
		${0:${VISUAL}}
	}
snippet elseif
	else if (${1}) {
		${0}
	}
snippet else
	else {
		${0:${VISUAL}}
	}
snippet ift
	${1} ? ${2} : ${0};
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3}
			break;
		${0}
		default:
			${4}
			break;
	}
snippet case
	case '${1:value}':
		${0:${VISUAL}}
		break;
snippet for
	for ($${1:index} = 0; $$2 < ${2:count}; $$2${3:++}) {
		${0:${VISUAL}}
	}
snippet while
	while ($${1:var}) {
		${0:${VISUAL}}
	}
snippet do
	do {
		${0:${VISUAL}}
	} while ($${1:var})
snippet fore
	foreach ($${1:var} as $${2:value}) {
		${0:${VISUAL}}
	}
snippet forek
	foreach ($${1:var} as $${2:key} => $${3:value}) {
		${0:${VISUAL}}
	}
snippet try
	try {
		${1}
	} catch (${2:\Throwable} \$exception) {
		${0}
	}
snippet throw
	throw new ${1}(${0});
snippet vd
	var_dump(${0});
snippet vdd
	var_dump(${1});
	die(${0:});
snippet match
	match (${1}) {
		${2} => ${3},
		${4} => ${5},
	};
snippet const
	const ${1} = ${2};
snippet ext
	extends ${1}
snippet imp
	implements ${1}
snippet pub
	public $${1};
snippet pro
	protected $${1};
snippet priv
	private $${1};
snippet s
	self::${1};
snippet p
	parent::${1
snippet n
	new ${1};
snippet pr
	print_r(${1});
snippet prd
	print_r(${1});
	die(${0:});
snippet q
	->query(${1})
snippet req
	require(${1});
snippet reqo
	require_once(${1});
snippet inc
	include("${1}");
snippet inco
	include_once("${1}");
snippet dd
	dd(${1});
snippet ddd
	dd(${1});
	die(${0:});
snippet die
	die(${0});
snippet exit
	exit(${0});
snippet clf
	<?php

	declare(strict_types=1);

	namespace ${1};

	class ${2}
	{
		public function __construct(${3})
		{
			${4}
		}

		public function ${5}(${6}): ${7}
		{
			${0}
		}
	}
snippet head
	header("Location: /${1}");
	exit();
snippet arr
	[${0}];
